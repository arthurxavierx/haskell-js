// Generated by CoffeeScript 1.6.2
var f;

f = f || {};

f.Sequence = (function() {
  Sequence.prototype.formula = null;

  Sequence.prototype.sequence = [];

  Sequence.prototype.set = function(sequence, index) {
    if (index == null) {
      index = 0;
    }
    if (typeof sequence === "function" || typeof sequence === "string") {
      return this.formula = sequence.toFunction();
    } else {
      return this.sequence = (index === 0 ? sequence : this.sequence.map(function(a, i) {
        if (i >= index && i < index + sequence.length) {
          return sequence[i - sequence.length];
        } else {
          return a;
        }
      }));
    }
  };

  Sequence.prototype.get = function(index, size) {
    var i;

    if (size == null) {
      size = 0;
    }
    if (this.formula) {
      if (size === 0) {
        return this.formula.call(this.sequence || this, index);
      }
      return (function() {
        var _i, _results;

        _results = [];
        for (i = _i = 0; 0 <= size ? _i <= size : _i >= size; i = 0 <= size ? ++_i : --_i) {
          _results.push(this.formula.call(this.sequence || this, index + i));
        }
        return _results;
      }).call(this);
    }
    if (size === 0) {
      return this.sequence[index];
    }
    return this.sequence.slice(index, size + 1);
  };

  Sequence.prototype.inverse = function() {
    var _f;

    _f = this.formula;
    return new Sequence(_f ? function(x) {
      return 1 / _f(x);
    } : this.sequence.map('1/x'));
  };

  Sequence.prototype.negative = function() {
    var _f;

    _f = this.formula;
    return new Sequence(_f ? function(x) {
      return -_f(x);
    } : this.sequence.map('-x'));
  };

  function Sequence(sequence) {
    this.set(sequence);
  }

  return Sequence;

})();

global.Sequence = f.Sequence;

f.seq = f.sequence = function(sequence) {
  return new Sequence(sequence);
};

Array.prototype.sequence = function() {
  return new Sequence(this);
};

module.exports = f;
