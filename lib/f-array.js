// Generated by CoffeeScript 1.6.2
var FArray,
  __slice = [].slice;

FArray = Array;

if (!FArray.prototype.zip) {
  global.zip = FArray.zip = function() {
    var array, i, length, lengthArray, _i, _results;

    lengthArray = (function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        array = arguments[_i];
        _results.push(array.length);
      }
      return _results;
    }).apply(this, arguments);
    length = Math.min.apply(Math, lengthArray);
    _results = [];
    for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
      _results.push((function() {
        var _j, _len, _results1;

        _results1 = [];
        for (_j = 0, _len = arguments.length; _j < _len; _j++) {
          array = arguments[_j];
          _results1.push(array[i]);
        }
        return _results1;
      }).apply(this, arguments));
    }
    return _results;
  };
  FArray.prototype.zip = function() {
    return FArray.zip.apply(FArray, [this].concat(__slice.call(arguments)));
  };
}

if (!FArray.prototype.unique) {
  global.unique = FArray.unique = function(array) {
    var element, i, unique, _i, _ref, _results;

    unique = new Object;
    for (i = _i = 0, _ref = array.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      unique[array[i]] = array[i];
    }
    _results = [];
    for (i in unique) {
      element = unique[i];
      _results.push(element);
    }
    return _results;
  };
  FArray.prototype.unique = function() {
    return FArray.unique(this);
  };
}

if (!FArray.prototype.dictionary) {
  FArray.prototype.dictionary = function(key) {
    return this.reduce((function(d, o) {
      if (o[key] != null) {
        d[o[key]] = o;
      }
      return d;
    }), new Object);
  };
}

if (!FArray.prototype.empty) {
  FArray.prototype.empty = function() {
    return this.length < 1;
  };
}

if (!FArray.prototype.remove) {
  FArray.prototype.remove = function(index) {
    var callback, i;

    if (typeof index === "function") {
      callback = index;
      i = 0;
      while (i < this.length) {
        if (callback(this[i], i, this)) {
          this.splice(i, 1);
          i--;
        }
        i++;
      }
    } else {
      this.splice(index, 1);
    }
    return this;
  };
}

module.exports = FArray;
